{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "TeamName": {
      "defaultValue": "Retail on the Edge",
      "type": "String"
    },
    "TeamChannelName": {
      "defaultValue": "Front Line Workers",
      "type": "String"
    },
    "CustomerEmail": {
      "defaultValue": "",
      "type": "String"
    }
  },
  "variables": {
    "prefix": "rote",
    "uniquePrefix": "[concat(variables('prefix'), substring(uniqueString(resourceGroup().id), 0, 6))]",
    "acr": {
      "name": "[concat(variables('uniquePrefix'), 'acr')]"
    },
    "maps": {
      "name": "[concat(variables('uniquePrefix'), 'maps')]",
      "id": "[concat(resourceGroup().id,'/providers/','Microsoft.Maps/accounts/', concat(variables('uniquePrefix'), 'maps'))]"
    },
    "connections": {
      "teams": "teams",
      "office365": "office365",
      "sql": "sql"
    },
    "sql": {
      "name": "[concat(variables('uniquePrefix'), 'sql')]",
      "administratorLogin": "theadmin",
      "administratorLoginPassword": "M1cro$oft2020",
      "db": {
        "name": "rote",
        "edition": "Basic",
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "serviceObjectiveName": "Basic"
      }
    },
    "storage": {
      "name": "[concat(variables('uniquePrefix'), 'storage')]",
      "id": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', concat(variables('uniquePrefix'), 'storage'))]"
    },
    "website": {
      "name": "[concat(variables('uniquePrefix'), 'app')]",
      "serverfarms": {
        "name": "[concat(variables('uniquePrefix'), 'sf')]"
      }
    },
    "logicapps": {
      "alertCustomerArrived": "AlertCustomerArrived",
      "alertStockLevel": "AlertStockLevel",
      "orderReadyToPickedUp": "OrderReadyToPickedUp"
    },
    "streamingJobs": {
      "edgestreamanalytics": {
        "name": "[concat(variables('uniquePrefix'), 'EdgeStreamJob')]"
      }
    },
    "insights": {
      "name": "[concat(variables('uniquePrefix'), 'insightscomp')]"
    },
    "vault": {
      "name": "[concat(variables('uniquePrefix'), 'vault')]"
    },
    "ml": {
      "name": "[concat(variables('uniquePrefix'), 'ml')]"
    }
  },
  "resources": [{
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-05-01",
      "name": "[variables('acr').name]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "adminUserEnabled": true,
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": 7,
            "status": "disabled"
          }
        }
      }
    },
    {
      "type": "Microsoft.Maps/accounts",
      "apiVersion": "2020-02-01-preview",
      "name": "[variables('maps').name]",
      "location": "global",
      "sku": {
        "name": "S1",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Maps/accounts/privateAtlases",
      "apiVersion": "2020-02-01-preview",
      "name": "[concat(variables('maps').name, '/mapscreator')]",
      "location": "United States",
      "dependsOn": [
        "[resourceId('Microsoft.Maps/accounts', variables('maps').name)]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('sql').name]",
      "location": "[resourceGroup().location]",
      "kind": "v12.0",
      "properties": {
        "administratorLogin": "[variables('sql').administratorLogin]",
        "administratorLoginPassword": "[variables('sql').administratorLoginPassword]",
        "version": "12.0"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2017-10-01-preview",
      "name": "[concat(variables('sql').name, '/', variables('sql').db.name)]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sql').name)]"
      ],
      "sku": {
        "name": "Basic",
        "tier": "Basic",
        "capacity": 5
      },
      "kind": "v12.0,user",
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648,
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": false,
        "readScale": "Disabled",
        "readReplicaCount": 0
      }
    },
    {
      "type": "Microsoft.Sql/servers/auditingPolicies",
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('sql').name, '/Default')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "auditingState": "Disabled"
      }
    },
    {
      "type": "Microsoft.Sql/servers/auditingSettings",
      "apiVersion": "2017-03-01-preview",
      "name": "[concat(variables('sql').name, '/Default')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "state": "Disabled",
        "retentionDays": 0,
        "auditActionsAndGroups": [],
        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
        "isStorageSecondaryKeyInUse": false,
        "isAzureMonitorTargetEnabled": false
      }
    },
    {
      "type": "Microsoft.Sql/servers/encryptionProtector",
      "apiVersion": "2015-05-01-preview",
      "name": "[concat(variables('sql').name, '/current')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "kind": "servicemanaged",
      "properties": {
        "serverKeyName": "ServiceManaged",
        "serverKeyType": "ServiceManaged"
      }
    },
    {
      "type": "Microsoft.Sql/servers/extendedAuditingSettings",
      "apiVersion": "2017-03-01-preview",
      "name": "[concat(variables('sql').name, '/Default')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "state": "Disabled",
        "retentionDays": 0,
        "auditActionsAndGroups": [],
        "storageAccountSubscriptionId": "00000000-0000-0000-0000-000000000000",
        "isStorageSecondaryKeyInUse": false,
        "isAzureMonitorTargetEnabled": false
      }
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2015-05-01-preview",
      "name": "[concat(variables('sql').name, '/AllowAllWindowsAzureIps')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2015-05-01-preview",
      "name": "[concat(variables('sql').name, '/AllowAllIps')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "255.255.255.255"
      }
    },
    {
      "type": "Microsoft.Sql/servers/securityAlertPolicies",
      "apiVersion": "2017-03-01-preview",
      "name": "[concat(variables('sql').name, '/Default')]",
      "dependsOn": [
        "[resourceId('Microsoft.SQL/servers/databases', variables('sql').name, variables('sql').db.name)]"
      ],
      "properties": {
        "state": "Disabled",
        "disabledAlerts": [
          ""
        ],
        "emailAddresses": [
          ""
        ],
        "emailAccountAdmins": false,
        "retentionDays": 0
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storage').name]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storage').name, '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "enabled": false
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2019-06-01",
      "name": "[concat(variables('storage').name, '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]"
      ],
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('connections').office365]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('CustomerEmail')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').office365)]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('connections').sql]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[concat(variables('sql').db.name, ' ', variables('sql').name, '.database.windows.net')]",
        "parameterValues": {
          "server": "[concat(variables('sql').name, '.database.windows.net')]",
          "database": "[variables('sql').db.name]",
          "authType": "windows",
          "username": "[variables('sql').administratorLogin]",
          "password": "[variables('sql').administratorLoginPassword]"
        },
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').sql)]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[variables('connections').teams]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('CustomerEmail')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').teams)]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('logicapps').alertCustomerArrived]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections').sql)]",
        "[resourceId('Microsoft.Web/connections', variables('connections').teams)]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {}
              }
            }
          },
          "actions": {
            "Execute_a_SQL_query_(V2)": {
              "runAfter": {
                "IfChannelDoNotExists": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "query": "SELECT TOP(1) * FROM CustomerOrders ORDER BY CreatedDate DESC;"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
              }
            },
            "ForEachTeam": {
              "foreach": "@body('List_teams')?['value']",
              "actions": {
                "IfIsTeam": {
                  "actions": {
                    "Set_variable_2": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "TeamId",
                        "value": "@items('ForEachTeam')?['id']"
                      }
                    }
                  },
                  "runAfter": {},
                  "expression": {
                    "and": [{
                      "equals": [
                        "@items('ForEachTeam')?['displayName']",
                        "@variables('TeamName')"
                      ]
                    }]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "List_teams": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "ForEachTeamChannel": {
              "foreach": "@body('List_channels')?['value']",
              "actions": {
                "IfIsChannel": {
                  "actions": {
                    "SetChannelId": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "TeamChannelId",
                        "value": "@items('ForEachTeamChannel')?['id']"
                      }
                    }
                  },
                  "runAfter": {},
                  "expression": {
                    "and": [{
                      "equals": [
                        "@items('ForEachTeamChannel')?['displayName']",
                        "@variables('TeamChannelName')"
                      ]
                    }]
                  },
                  "type": "If"
                }
              },
              "runAfter": {
                "List_channels": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "For_each": {
              "foreach": "@body('Execute_a_SQL_query_(V2)')?['resultsets']?['Table1']",
              "actions": {
                "Post_a_message_as_the_Flow_bot_to_a_channel": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "messageBody": "Customer has arrived to pick up Order @{items('For_each')?['OrderId']}. Please meet them at the front desk.",
                      "recipient": {
                        "channelId": "@variables('TeamChannelId')"
                      }
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['teams']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/flowbot/actions/notification/recipienttypes/channel",
                    "queries": {
                      "groupId": "@variables('TeamId')"
                    }
                  }
                }
              },
              "runAfter": {
                "Execute_a_SQL_query_(V2)": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "IfChannelDoNotExists": {
              "actions": {
                "Create_a_channel": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "displayName": "@variables('TeamChannelName')"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['teams']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/beta/groups/@{encodeURIComponent(variables('TeamId'))}/channels"
                  }
                },
                "Set_variable": {
                  "runAfter": {
                    "Create_a_channel": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "TeamChannelId",
                    "value": "@body('Create_a_channel')?['id']"
                  }
                }
              },
              "runAfter": {
                "ForEachTeamChannel": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [{
                  "equals": [
                    "@variables('TeamChannelId')",
                    "Empty"
                  ]
                }]
              },
              "type": "If"
            },
            "Initialize_TeamChannelId_Var": {
              "runAfter": {
                "Initialize_TeamChannelName_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [{
                  "name": "TeamChannelId",
                  "type": "string",
                  "value": "Empty"
                }]
              }
            },
            "Initialize_TeamChannelName_Var": {
              "runAfter": {
                "Initialize_TeamId_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [{
                  "name": "TeamChannelName",
                  "type": "string",
                  "value": "[parameters('TeamChannelName')]"
                }]
              }
            },
            "Initialize_TeamId_Var": {
              "runAfter": {
                "Initialize_TeamName_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable",
              "inputs": {
                "variables": [{
                  "name": "TeamId",
                  "type": "string",
                  "value": "Empty"
                }]
              }
            },
            "Initialize_TeamName_Var": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [{
                  "name": "TeamName",
                  "type": "string",
                  "value": "[parameters('TeamName')]"
                }]
              }
            },
            "List_channels": {
              "runAfter": {
                "ForEachTeam": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/beta/groups/@{encodeURIComponent(variables('TeamId'))}/channels"
              }
            },
            "List_teams": {
              "runAfter": {
                "Initialize_TeamChannelId_Var": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/beta/me/joinedTeams"
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').sql)]",
                "connectionName": "sql",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').sql)]"
              },
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').teams)]",
                "connectionName": "teams",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').teams)]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('logicapps').alertStockLevel]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections').teams)]",
        "[resourceId('Microsoft.Web/connections', variables('connections').sql)]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "ForEachTeam": {
              "actions": {
                "IfIsTeam": {
                  "actions": {
                    "Set_variable": {
                      "inputs": {
                        "name": "TeamId",
                        "value": "@items('ForEachTeam')?['id']"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "expression": {
                    "and": [{
                      "equals": [
                        "@items('ForEachTeam')?['displayName']",
                        "@variables('TeamName')"
                      ]
                    }]
                  },
                  "runAfter": {},
                  "type": "If"
                }
              },
              "foreach": "@body('List_teams')?['value']",
              "runAfter": {
                "List_teams": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "ForEachTeamChannel": {
              "actions": {
                "IfIsChannel": {
                  "actions": {
                    "SetChannelId": {
                      "inputs": {
                        "name": "TeamChannelId",
                        "value": "@items('ForEachTeamChannel')?['id']"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "expression": {
                    "and": [{
                      "equals": [
                        "@items('ForEachTeamChannel')?['displayName']",
                        "@variables('TeamChannelName')"
                      ]
                    }]
                  },
                  "runAfter": {},
                  "type": "If"
                }
              },
              "foreach": "@body('List_channels')?['value']",
              "runAfter": {
                "List_channels": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "IfChannelDoNotExists": {
              "actions": {
                "Create_a_channel": {
                  "inputs": {
                    "body": {
                      "displayName": "@variables('TeamChannelName')"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['teams']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/beta/groups/@{encodeURIComponent(variables('TeamId'))}/channels"
                  },
                  "runAfter": {},
                  "type": "ApiConnection"
                },
                "SetChannelIdFromNewChannel": {
                  "inputs": {
                    "name": "TeamChannelId",
                    "value": "@body('Create_a_channel')?['id']"
                  },
                  "runAfter": {
                    "Create_a_channel": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "expression": {
                "and": [{
                  "equals": [
                    "@variables('TeamChannelId')",
                    "Empty"
                  ]
                }]
              },
              "runAfter": {
                "ForEachTeamChannel": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "Initialize_TeamChannelId_Var": {
              "inputs": {
                "variables": [{
                  "name": "TeamChannelId",
                  "type": "string",
                  "value": "Empty"
                }]
              },
              "runAfter": {
                "Initialize_TeamChannelName_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_TeamChannelName_Var": {
              "inputs": {
                "variables": [{
                  "name": "TeamChannelName",
                  "type": "string",
                  "value": "[parameters('TeamChannelName')]"
                }]
              },
              "runAfter": {
                "Initialize_TeamId_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_TeamId_Var": {
              "inputs": {
                "variables": [{
                  "name": "TeamId",
                  "type": "string",
                  "value": "Empty"
                }]
              },
              "runAfter": {
                "Initialize_TeamName_Var": [
                  "Succeeded"
                ]
              },
              "type": "InitializeVariable"
            },
            "Initialize_TeamName_Var": {
              "inputs": {
                "variables": [{
                  "name": "TeamName",
                  "type": "string",
                  "value": "[parameters('TeamName')]"
                }]
              },
              "runAfter": {},
              "type": "InitializeVariable"
            },
            "IsAlertMessage": {
              "actions": {
                "Execute_a_SQL_query_(V2)": {
                  "inputs": {
                    "body": {
                      "query": "UPDATE Alerts SET  LastUpdated = CURRENT_TIMESTAMP,  \n    Status = 'Timeout' WHERE DeviceId = '@{triggerBody()?['device']?['id']}' AND Status = 'Unresolved' AND DATEADD(minute, 10, LastUpdated) < CURRENT_TIMESTAMP;"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
                  },
                  "runAfter": {},
                  "type": "ApiConnection"
                },
                "IsStartEvent": {
                  "actions": {
                    "ThereIsNotAnOpenCaseWhenStart": {
                      "actions": {
                        "InsertNewCase": {
                          "inputs": {
                            "body": {
                              "query": "INSERT INTO Alerts (DeviceId, IncidentType, Status, ReportedTime, LastUpdated) VALUES ('@{triggerBody()?['device']?['id']}', 'StockAlert', 'Unresolved', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['sql']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
                          },
                          "runAfter": {},
                          "type": "ApiConnection"
                        },
                        "Post_a_message_as_the_Flow_bot_to_a_channel_3": {
                          "inputs": {
                            "body": {
                              "messageBody": "Device @{triggerBody()?['device']?['id']}: WARNING! Canned Beans are low in stock on aisle 3.",
                              "recipient": {
                                "channelId": "@variables('TeamChannelId')"
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['teams']['connectionId']"
                              }
                            },
                            "method": "post",
                            "path": "/flowbot/actions/notification/recipienttypes/channel",
                            "queries": {
                              "groupId": "@variables('TeamId')"
                            }
                          },
                          "runAfter": {
                            "InsertNewCase": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection"
                        }
                      },
                      "else": {
                        "actions": {
                          "UpdateOpenCaseLastUpdate": {
                            "inputs": {
                              "body": {
                                "query": "UPDATE Alerts SET  LastUpdated = CURRENT_TIMESTAMP WHERE DeviceId = '@{triggerBody()?['device']?['id']}' AND Status = 'Unresolved';"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['sql']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                          }
                        }
                      },
                      "expression": {
                        "and": [{
                          "equals": [
                            "@empty(body('SQLQueryOpenCase')?['resultsets'])",
                            true
                          ]
                        }]
                      },
                      "runAfter": {},
                      "type": "If"
                    }
                  },
                  "else": {
                    "actions": {
                      "ThereIsNotAnOpenCaseWhenEnd": {
                        "actions": {},
                        "else": {
                          "actions": {
                            "Post_a_message_as_the_Flow_bot_to_a_channel_4": {
                              "inputs": {
                                "body": {
                                  "messageBody": "Device @{triggerBody()?['device']?['id']}: INFORMATION! Canned Beans have now been restocked on aisle 3.",
                                  "recipient": {
                                    "channelId": "@variables('TeamChannelId')"
                                  }
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['teams']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/flowbot/actions/notification/recipienttypes/channel",
                                "queries": {
                                  "groupId": "@variables('TeamId')"
                                }
                              },
                              "runAfter": {
                                "UpdateCaseWithResolveStatus": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ApiConnection"
                            },
                            "UpdateCaseWithResolveStatus": {
                              "inputs": {
                                "body": {
                                  "query": "UPDATE Alerts SET  LastUpdated = CURRENT_TIMESTAMP,  Status = 'Resolved' WHERE DeviceId = '@{triggerBody()?['device']?['id']}' AND Status = 'Unresolved';"
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['sql']['connectionId']"
                                  }
                                },
                                "method": "post",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
                              },
                              "runAfter": {},
                              "type": "ApiConnection"
                            }
                          }
                        },
                        "expression": {
                          "and": [{
                            "equals": [
                              "@empty(body('SQLQueryOpenCase')?['resultsets'])",
                              true
                            ]
                          }]
                        },
                        "runAfter": {},
                        "type": "If"
                      }
                    }
                  },
                  "expression": {
                    "and": [{
                      "equals": [
                        "@triggerBody()?['device']?['telemetry']?['manage']?['event_type']?['value']",
                        "start"
                      ]
                    }]
                  },
                  "runAfter": {
                    "SQLQueryOpenCase": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "SQLQueryOpenCase": {
                  "inputs": {
                    "body": {
                      "query": "SELECT IncidentID, LastUpdated FROM Alerts WHERE DeviceId = '@{triggerBody()?['device']?['id']}' AND Status = 'Unresolved';"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['sql']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
                  },
                  "runAfter": {
                    "Execute_a_SQL_query_(V2)": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection"
                }
              },
              "expression": {
                "and": [{
                  "equals": [
                    "@triggerBody()?['device']?['telemetry']?['manage']?['message_type']?['value']",
                    "alert"
                  ]
                }]
              },
              "runAfter": {
                "IfChannelDoNotExists": [
                  "Succeeded"
                ]
              },
              "type": "If"
            },
            "List_channels": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/beta/groups/@{encodeURIComponent(variables('TeamId'))}/channels"
              },
              "runAfter": {
                "ForEachTeam": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            },
            "List_teams": {
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/beta/me/joinedTeams"
              },
              "runAfter": {
                "Initialize_TeamChannelId_Var": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "inputs": {
                "schema": {
                  "properties": {
                    "action": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "rules": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "type": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "application": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "host": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "subdomain": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "device": {
                      "properties": {
                        "approved": {
                          "type": "boolean"
                        },
                        "displayName": {
                          "type": "string"
                        },
                        "etag": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "instanceOf": {
                          "type": "string"
                        },
                        "provisioned": {
                          "type": "boolean"
                        },
                        "simulated": {
                          "type": "boolean"
                        },
                        "telemetry": {
                          "properties": {
                            "manage": {
                              "properties": {
                                "count": {
                                  "properties": {
                                    "value": {
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "event_type": {
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "message_type": {
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "rule": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "kind": "Http",
              "type": "Request"
            }
          }
        },
        "parameters": {
          "$connections": {
            "value": {
              "teams": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').teams)]",
                "connectionName": "teams",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').teams)]"
              },
              "sql": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').sql)]",
                "connectionName": "sql",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').sql)]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('logicapps').orderReadyToPickedUp]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('connections').office365)]",
        "[resourceId('Microsoft.Web/connections', variables('connections').sql)]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {}
              }
            }
          },
          "actions": {
            "Execute_a_SQL_query_(V2)": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "query": "SELECT TOP(1) * FROM CustomerOrders ORDER BY CreatedDate DESC;"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent('default'))},@{encodeURIComponent(encodeURIComponent('default'))}/query/sql"
              }
            },
            "For_each": {
              "foreach": "@body('Execute_a_SQL_query_(V2)')?['resultsets']?['Table1']",
              "actions": {
                "Send_an_email_(V2)": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "Body": "<p>Your order of 'Canned Beans' is ready to be picked up from Contoso Market. See you soon!</p>",
                      "Subject": "Order @{items('For_each')?['OrderId']} ready to be picked up!",
                      "To": "[parameters('CustomerEmail')]"
                    },
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['office365']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/v2/Mail"
                  }
                }
              },
              "runAfter": {
                "Execute_a_SQL_query_(V2)": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "office365": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').office365)]",
                "connectionName": "[variables('connections').office365]",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').office365)]"
              },
              "sql": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections').sql)]",
                "connectionName": "sql",
                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/', variables('connections').sql)]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('website').serverfarms.name]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Maps/accounts', variables('maps').name)]"
      ],
      "sku": {
        "name": "D1",
        "tier": "Shared",
        "size": "D1",
        "family": "D",
        "capacity": 0
      },
      "kind": "app",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "apiVersion": "2018-02-01",
      "name": "[variables('website').name]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('website').serverfarms.name)]"
      ],
      "tags": null,
      "properties": {
        "name": "[variables('website').name]",
        "enabled": true,
        "hostNameSslStates": [{
            "name": "[concat(variables('website').name, '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('website').name, '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('website').serverfarms.name)]",
        "siteConfig": {
          "appSettings": [{
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_Mode",
              "value": "default"
            },
            {
              "name": "DiagnosticServices_EXTENSION_VERSION",
              "value": "disabled"
            },
            {
              "name": "APPINSIGHTS_PROFILERFEATURE_VERSION",
              "value": "disabled"
            },
            {
              "name": "APPINSIGHTS_SNAPSHOTFEATURE_VERSION",
              "value": "disabled"
            },
            {
              "name": "InstrumentationEngine_EXTENSION_VERSION",
              "value": "disabled"
            },
            {
              "name": "SnapshotDebugger_EXTENSION_VERSION",
              "value": "disabled"
            },
            {
              "name": "XDT_MicrosoftApplicationInsights_BaseExtensions",
              "value": "disabled"
            },
            {
              "name": "Azure:Sql:ConnectionString",
              "value": "[concat('Server=tcp:', variables('sql').name, '.database.windows.net,1433;Initial Catalog=', variables('sql').db.name, ';Persist Security Info=False;User ID=',variables('sql').administratorLogin,';Password=',variables('sql').administratorLoginPassword,';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            {
              "name": "Azure:Maps:Key",
              "value": "[listKeys(variables('maps').id,'2020-02-01-preview').primaryKey]"
            },
            {
              "name": "Azure:Maps:DatasetId",
              "value": ""
            },
            {
              "name": "Azure:Maps:TilesetId",
              "value": ""
            },
            {
              "name": "Azure:Maps:StateSetId",
              "value": ""
            },
            {
              "name": "Azure:IoTCentral:DeviceId",
              "value": ""
            },
            {
              "name": "Azure:IoTCentral:IoTCentralDomain",
              "value": ""
            },
            {
              "name": "Azure:IoTCentral:IoTCentralApiToken",
              "value": ""
            }
          ],
          "metadata": [{
            "name": "CURRENT_STACK",
            "value": "dotnetcore"
          }]
        },
        "clientAffinityEnabled": true
      },
      "resources": [{
        "name": "MSDeploy",
        "type": "extensions",
        "location": "[resourceGroup().location]",
        "apiVersion": "2015-08-01",
        "dependsOn": [
          "[concat('Microsoft.Web/sites/', variables('website').name)]"
        ],
        "tags": {
          "displayName": "webDeploy"
        },
        "properties": {
          "packageUri": "https://zarmada.blob.core.windows.net/rote-shared/rote-web.zip?sp=r&st=2020-06-12T00:07:32Z&se=2050-06-12T08:07:32Z&spr=https&sv=2019-10-10&sr=b&sig=x6t3Yc6%2BjrFAL7uJ5emgq6mL7Qd42uH%2BRKbyPZ%2BHPKU%3D ",
          "dbType": "None",
          "connectionString": ""
        }
      }]
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs",
      "apiVersion": "2017-04-01-preview",
      "name": "[variables('streamingJobs').edgestreamanalytics.name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "jobType": "edge",
        "sku": {
          "name": "Standard"
        },
        "eventsOutOfOrderPolicy": "Adjust",
        "outputErrorPolicy": "Stop",
        "eventsOutOfOrderMaxDelayInSeconds": 0,
        "eventsLateArrivalMaxDelayInSeconds": 5,
        "dataLocale": "en-US",
        "compatibilityLevel": "1.1",
        "transformation": {
          "name": "Transformation",
          "properties": {
            "streamingUnits": 1,
            "query": "WITH startbuffer AS (\n   SELECT System.Timestamp() AS timestamp, MIN(grocery_items) AS GroceryItems, COUNT(*) AS count\n   FROM deviceinput\n   WHERE grocery_items < 4\n   GROUP BY TUMBLINGWINDOW(s, 10)\n),\nstartbase AS (\n   SELECT timestamp, GroceryItems\n   FROM startbuffer\n   WHERE ISFIRST(s, 30) OVER (WHEN count > 2) = 1\n),\nendbuffer AS (\n   SELECT System.Timestamp() AS timestamp, MAX(grocery_items) AS GroceryItems, COUNT(*) AS count\n   FROM deviceinput\n   GROUP BY TUMBLINGWINDOW(s, 10)\n),\nendbase AS (\n   SELECT timestamp, GroceryItems, count\n   FROM endbuffer\n   WHERE GroceryItems >= 4 AND LAG(GroceryItems) OVER (LIMIT DURATION(second, 60)) < 4\n)\n\nSELECT 'alert' AS message_type, 'start' AS event_type, timestamp, GroceryItems AS count\nINTO alertstart\nFROM startbase\n\nSELECT 'alert' AS message_type, 'end' AS event_type, timestamp, GroceryItems AS count\nINTO alertend\nFROM endbase"
          }
        }
      }
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs/inputs",
      "apiVersion": "2017-04-01-preview",
      "name": "[concat(variables('streamingJobs').edgestreamanalytics.name, '/deviceinput')]",
      "dependsOn": [
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', variables('streamingJobs').edgestreamanalytics.name)]"
      ],
      "properties": {
        "type": "Stream",
        "compression": {
          "type": "None"
        },
        "datasource": {
          "type": "GatewayMessageBus",
          "properties": {}
        },
        "serialization": {
          "type": "Json",
          "properties": {
            "encoding": "UTF8"
          }
        },
        "etag": "11fc6dee-c0cc-47de-9f8d-29b4e5c6367a"
      }
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
      "apiVersion": "2017-04-01-preview",
      "name": "[concat(variables('streamingJobs').edgestreamanalytics.name, '/alertend')]",
      "dependsOn": [
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', variables('streamingJobs').edgestreamanalytics.name)]"
      ],
      "properties": {
        "datasource": {
          "type": "GatewayMessageBus",
          "properties": {}
        },
        "serialization": {
          "type": "Json",
          "properties": {
            "encoding": "UTF8",
            "format": "LineSeparated"
          }
        }
      }
    },
    {
      "type": "Microsoft.StreamAnalytics/streamingjobs/outputs",
      "apiVersion": "2017-04-01-preview",
      "name": "[concat(variables('streamingJobs').edgestreamanalytics.name, '/alertstart')]",
      "dependsOn": [
        "[resourceId('Microsoft.StreamAnalytics/streamingjobs', variables('streamingJobs').edgestreamanalytics.name)]"
      ],
      "properties": {
        "datasource": {
          "type": "GatewayMessageBus",
          "properties": {}
        },
        "serialization": {
          "type": "Json",
          "properties": {
            "encoding": "UTF8",
            "format": "LineSeparated"
          }
        }
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('insights').name]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "name": "[variables('vault').name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        },
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2018-11-19",
      "name": "[variables('ml').name]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('acr').name)]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('vault').name)]",
        "[resourceId('microsoft.insights/components', variables('insights').name)]"
      ],
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('storage').name)]",
        "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', variables('acr').name)]",
        "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('vault').name)]",
        "applicationInsights": "[resourceId('microsoft.insights/components', variables('insights').name)]",
        "discoveryUrl": "[concat('https://', resourceGroup().location, '.experiments.azureml.net/discovery')]"
      }
    }
  ],
  "outputs": {
    "Customer Arrived Alert Logic App Endpoint": {
      "type": "string",
      "value": "[listCallbackUrl(resourceId(resourceGroup().name,'Microsoft.Logic/workflows/triggers', variables('logicapps').alertCustomerArrived, 'manual'), '2016-06-01').value]"
    },
    "Stock Level Alert Logic App Endpoint": {
      "type": "string",
      "value": "[listCallbackUrl(resourceId(resourceGroup().name,'Microsoft.Logic/workflows/triggers', variables('logicapps').alertStockLevel, 'manual'), '2016-06-01').value]"
    },
    "Order Ready to Picked Up Logic App Endpoint": {
      "type": "string",
      "value": "[listCallbackUrl(resourceId(resourceGroup().name,'Microsoft.Logic/workflows/triggers', variables('logicapps').orderReadyToPickedUp, 'manual'), '2016-06-01').value]"
    },
    "Maps Account Key": {
      "type": "string",
      "value": "[listKeys(variables('maps').id,'2020-02-01-preview').primaryKey]"
    },
    "SQL Server": {
      "type": "string",
      "value": "[concat(variables('sql').name, '.database.windows.net')]"
    },
    "Database Name": {
      "type": "string",
      "value": "[variables('sql').db.name]"
    },
    "SQL Server Username": {
      "type": "string",
      "value": "[variables('sql').administratorLogin]"
    },
    "SQL Server Password": {
      "type": "string",
      "value": "[variables('sql').administratorLoginPassword]"
    }
  }
}
